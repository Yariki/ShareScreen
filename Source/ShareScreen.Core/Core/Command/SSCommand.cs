///////////////////////////////////////////////////////////
//  SSCommand.cs
//  Implementation of the Class SSCommand
//  Generated by Enterprise Architect
//  Created on:      15-Nov-2015 22:31:25
//  Original author: Yariki
///////////////////////////////////////////////////////////

using System;
using System.Diagnostics.Contracts;
using System.Windows.Input;

namespace ShareScreen.Core.Core.Command
{
    public class SSCommand : ICommand
    {
        private Func<object,bool> _canExecute;
        private Action<object> _execute;
        
        ///
        /// <param name="action"></param>
        public SSCommand(Action<object> action)
        {
            Contract.Requires(action != null);
            _execute = action;
        }

        ///
        /// <param name="execute"></param>
        /// <param name="canExecute"></param>
        public SSCommand(Action<object> execute, Func<object,bool> canExecute):this(execute)
        {
            Contract.Requires(canExecute  != null);
            _canExecute = canExecute;
        }

        public bool CanExecute(object parameter)
        {
            return _canExecute != null && _canExecute(parameter);

        }

        public void Execute(object parameter)
        {
            _execute(parameter);
        }

        public event EventHandler CanExecuteChanged
        {
            add { CommandManager.RequerySuggested += value; }
            remove { CommandManager.RequerySuggested -= value; }
        }
    }//end SSCommand
}//end namespace Command