///////////////////////////////////////////////////////////
//  SSBaseCommandProvider.cs
//  Implementation of the Class SSBaseCommandProvider
//  Generated by Enterprise Architect
//  Created on:      15-Nov-2015 22:31:25
//  Original author: Yariki
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Diagnostics.Contracts;
using ShareScreen.Core.Interfaces.InteractionManager;

namespace ShareScreen.Core.Core.InteractionManager
{
    public class SSBaseCommandProvider : ISSCommonCommandProvider
    {
        private IDictionary<ISSSubscribeToken, ISSSubscription> subscribers;

        public SSBaseCommandProvider()
        {
            subscribers = new Dictionary<ISSSubscribeToken, ISSSubscription>();
        }

        ~SSBaseCommandProvider()
        {
        }

        ///
        /// <param name="args"></param>
        protected virtual void InternalPublish(object args)
        {
            foreach (var keyValuePair in subscribers)
            {
                keyValuePair.Value.Publish(args);
            }
        }

        ///
        /// <param name="subscription"></param>
        protected virtual ISSSubscribeToken InternalSubscribe(ISSSubscription subscription)
        {
            Contract.Requires(subscription != null);
            var token = new SSSubscriptionToken();
            subscription.Token = token;
            subscribers.Add(token,subscription);
            return token;
        }

        ///
        /// <param name="token"></param>
        protected virtual void InternalUnsubscribe(ISSSubscribeToken token)
        {
            Contract.Requires(token != null);
            Contract.Requires(token.Id != Guid.Empty);
            subscribers.Remove(token);
        }

        protected IDictionary<ISSSubscribeToken, ISSSubscription> GetSubscriptions()
        {
            return subscribers;
        } 

    }//end SSBaseCommandProvider
}//end namespace InteractionManager