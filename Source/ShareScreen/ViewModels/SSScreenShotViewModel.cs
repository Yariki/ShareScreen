///////////////////////////////////////////////////////////
//  SSScreenShotViewModel.cs
//  Implementation of the Class SSScreenShotViewModel
//  Generated by Enterprise Architect
//  Created on:      15-Nov-2015 22:31:26
//  Original author: Yariki
///////////////////////////////////////////////////////////

using System;
using System.ComponentModel.Composition;
using System.Diagnostics.Contracts;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Windows;
using System.Windows.Forms;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using SS.ShareScreen.Core.MVVM;
using SS.ShareScreen.Extensions;
using SS.ShareScreen.Interfaces.Core;
using SS.ShareScreen.Interfaces.Main;
using SS.ShareScreen.Logger;

namespace SS.ShareScreen.ViewModels
{
    [Export(typeof(ISSScreenShotViewModel))]
    [PartCreationPolicy(CreationPolicy.NonShared)]
    public class SSScreenShotViewModel : SSUIBaseViewModel<ISSScreenShotView>, ISSScreenShotViewModel
    {
        private static string FILTER = "*.png|*.png|*.jpg|*.jpg|*.bmp|*.bmp";

        public SSScreenShotViewModel()
        {
            Scale = 1.0;
            IsSaved = false;
        }

        public double Scale
        {
            set { Set(() => Scale, value); }
            get { return Get(() => Scale); }
        }

        public string Header
        {
            set { Set(() => Header, value); }
            get { return Get(() => Header); }
        }

        public void Save(string filename)
        {
            var folderDialog = new System.Windows.Forms.FolderBrowserDialog();
            if (folderDialog.ShowDialog() == DialogResult.OK)
            {
                try
                {
                    var path = Path.Combine(folderDialog.SelectedPath, filename + ".png");
                    if (ScreenShot.IsNotNull())
                    {
                        ScreenShot.Save(path, ImageFormat.Png);
                        Header = Path.GetFileName(path);
                        IsSaved = true;
                    }
                }
                catch (Exception e)
                {
                    Logger.Error(e.ToString());
                }
            }
        }

        public void SaveAs()
        {
            var dialog =new System.Windows.Forms.SaveFileDialog();
            dialog.DefaultExt = "*.png";
            dialog.Filter = FILTER;
            if (dialog.ShowDialog() == DialogResult.OK && !string.IsNullOrEmpty(dialog.FileName))
            {
                var ext = Path.GetExtension(dialog.FileName);
                ImageFormat format = ImageFormat.Png;
                switch (ext.ToUpperInvariant())
                {
                    case ".BMP":
                        format = ImageFormat.Bmp;
                        break;
                    case ".JPG":
                        format = ImageFormat.Jpeg;
                        break;
                }
                try
                {
                    ScreenShot.Save(dialog.FileName, format);
                    Header = Path.GetFileName(dialog.FileName);
                    IsSaved = true;
                }
                catch (Exception e)
                {
                    Logger.Error(e.ToString());
                }
            }
        }

        public bool IsSaved
        {
            get { return Get(() => IsSaved); }
            private set { Set(() => IsSaved,value); }
        }

        public void SetScreenShot(Bitmap screenShot)
        {
            Contract.Ensures(screenShot != null);
            ScreenShot = screenShot;
            ImageSource = System.Windows.Interop.Imaging.CreateBitmapSourceFromHBitmap(ScreenShot.GetHbitmap(), IntPtr.Zero, Int32Rect.Empty, BitmapSizeOptions.FromEmptyOptions());
        }


        public Bitmap ScreenShot
        {
            get { return Get(() => ScreenShot); }
            private set { Set(() => ScreenShot, value);}
        }

        public ImageSource ImageSource
        {
            set { Set(() => ImageSource, value); }
            private get { return Get(() => ImageSource); }
        }
        

        ///
        /// <param name="disposing"></param>
        protected override void Dispose(bool disposing)
        {
        }
        
    }//end SSScreenShotViewModel
}//end namespace ViewModels