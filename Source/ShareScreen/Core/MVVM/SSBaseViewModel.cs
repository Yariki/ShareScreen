///////////////////////////////////////////////////////////
//  SSBaseViewModel.cs
//  Implementation of the Class SSBaseViewModel
//  Generated by Enterprise Architect
//  Created on:      15-Nov-2015 22:31:25
//  Original author: Yariki
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.ComponentModel.Composition.Hosting;
using System.Linq.Expressions;
using SS.ShareScreen.Interfaces.Core;

namespace SS.ShareScreen.Core.MVVM
{
    public class SSBaseViewModel : ISSUIViewModel
    {
        private IDictionary<string, object> _values;
        protected CompositionContainer Container;
        protected bool Disposed = false;
        protected Interfaces.Core.ISSUIViewModel ParentViewModel;

        public SSBaseViewModel()
        {
        }

        ~SSBaseViewModel()
        {
        }

        public void Dispose()
        {
        }

        ///
        /// <param name="disposing"></param>
        protected virtual void Dispose(bool disposing)
        {
            
        }

        ///
        /// <param name="property"></param>
        protected virtual T Get<T>(string property)
        {
            return default(T);
        }

        ///
        /// <param name="property"></param>
        protected T Get<T>(Expression<Func<T>> property)
        {
            return default(T);
        }

        ///
        /// <param name="view"></param>
        public virtual void HideDialog(ISSView view)
        {
        }

        ///
        /// <param name="parentModel"></param>
        public void Initialize(ISSUIViewModel parentModel)
        {
        }

        ///
        /// <param name="property"></param>
        protected virtual void OnPropertyChanged(string property) { }

        ///
        /// <param name="property"></param>
        protected void OnPropertyChanged<T>(Expression<Func<T>> property)
        {
        }

        ///
        /// <param name="property"></param>
        /// <param name="value"></param>
        protected virtual void Set<T>(string property, T value)
        {   
        }

        ///
        /// <param name="property"></param>
        /// <param name="value"></param>
        protected void Set<T>(Expression<Func<T>> property, T value)
        {
        }

        ///
        /// <param name="view"></param>
        public void ShowDialog(ISSView view)
        {
        }
    }//end SSBaseViewModel
}//end namespace MVVM